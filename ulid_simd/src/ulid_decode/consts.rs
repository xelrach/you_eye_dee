/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

use aligned::{Aligned, A16, A32};

// ULIDs are 26 characters long, but we load 16 byte segments. Therefore, we need to remove the six
// extra bytes
pub static MASK_LAST_TEN_BYTES: Aligned<A16, [u8; 16]> = Aligned([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
]);

// Bits set to 1 in this mask are invalid in BASE32 ULID. Doing a bitwise AND with this mask will
// find invalid inputs
pub static ULID_INVALID_MASK: Aligned<A32, [u8; 32]> = Aligned([
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
    0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0,
]);

pub static AO_TABLE: Aligned<A16, [u8; 16]> = Aligned([
    0xFF, // Invalid
    0x0A, // A
    0x0B, // B
    0x0C, // C
    0x0D, // D
    0x0E, // E
    0x0F, // F
    0x10, // G
    0x11, // H
    0x01, // I
    0x12, // J
    0x13, // K
    0x01, // L
    0x14, // M
    0x15, // N
    0x00, // O
]);

pub static PZ_TABLE: Aligned<A16, [u8; 16]> = Aligned([
    0x16, // P
    0x17, // Q
    0x18, // R
    0x19, // S
    0x1A, // T
    0xFF, // U
    0x1B, // V
    0x1C, // W
    0x1D, // X
    0x1E, // Y
    0x1F, // Z
    0xFF, // Invalid
    0xFF, // Invalid
    0xFF, // Invalid
    0xFF, // Invalid
    0xFF, // Invalid
]);
